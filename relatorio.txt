Procure TODO antes de mandar!
(aqui e no código =P)

TODO correção automática. 
TODO deixar a bolinha mais legal no 1P
TODO Descricao (manual do usuário)




Nesse relatório, descrevemos a implementação de um jogo do estilo brickbreaker, realizada como exercício programa da disciplina "Computação Móvel", ministrada no primeiro semestre de 2014 no Instituto de Matemática e estatística da USP.


Motivação do trabalho

O trabalho consiste na implementação de um jogo no estilo brickbreaker na plataforma android. Esse modelo de jogo é bastante popular e tem diversas implementações disponíveis. 

O interesse maior no trabalho era de aprendizado, tanto de desenvolvimento de jogos em geral, como das peculiaridades que surgem quando se implementa esse jogo em um dispositivo móvel. 

Dispositivos móveis trazem muitas possibilidades para o desenvolvimento de jogos que não existem em consoles mais tradicionais: A interação com o usuário é normalmente feita via toque na tela (ao invés de teclado ou mouse); alguns dispositivos móveis oferecem sensores que podem ser explorados (como acelerômetro, magnetômetro e GPS); existe a possibilidade de usar a tela nas orientações retrato e paisagem (em oposição aos consoles tradicionais que costumam apenas oferecer a orientação "paisagem"); os jogos podem ser vistos de ângulos distintos por diferentes jogadores (porque a tela é relativamente pequena e móvel).

Nosso jogo explora bastante duas dessas características: a interação via toque e a possibilidade de diferentes jogadores verem a tela de ângulos diferentes (essa segunda, no modo multiplayer).

Dos opcionais do enunciado, o jogo implementa:
* Musica e efeitos sonoros
* Texturas
* Blocos móveis
* Modo de dois jogadores


Descrição breve do jogo:
O jogo implementado apresenta dois modos: um modo de um jogador, com três fases, e um modo de dois jogadores, com uma única fase.

No modo de um jogador, o jogador deve utilizar a raquete (um retângulo que ele controla, que se encontra na parte inferior da tela) para evitar que a bolinha "caia" para fora da tela, e para, usando a bolinha, destruir os tijolos presentes no nível.

Os dois primeiros níveis são níveis mais "clássicos", onde há muitos tijolos para serem destruídos. O ultimo nível é desenhado para exigir mais precisão do jogador: Há um único tijolo, mas ele está numa região de dificl acesso (cercado quase totalmente por paredes indestrutíveis).


Jogabilidade:
Nos nossos testes, a jogabilidade do jogo de dois jogadores parece ter agradado bastante às pessoas. O jogo de um único jogador foi dito mais tedioso, mas fizemos algumas alterações para torná-lo mais interessante.

Há muito o que experimentar e ajustar em termos de jogabilidade. Várias de nossas implementações são parametrizadas para permitir tais ajustes de maneira relativamente simples. Em particular, o terceiro nível foi parametrizado para facilitar alterações em sua geometria. A Paddle (a classe que implementa a raquete) pode ser ajustada rapidamente para alterar a maneira com que ela "reflete" a bola. Outro parâmetro importante que podemos calibrar é a velocidade da bolinha (essa última calibração, porém, é um pouco mais complexa, pois pode interagir negativamente com a implementação da colisão. Descrevemos esse problema e sua solução em breve.)

Uma característica que buscamos implementar no nosso jogo foi estimular jogadas de precisão. O jogo de 2 jogadores e o terceiro nível do jogo de um jogador exigem do jogador a habilidade de direcionar a bola de forma bastante precisa. Achamos que esse enfoque pode tornar o jogo mais interessante.



Sobre o código:

Nessa sessão, descrevemos o código da aplicação.

OpenGL:

Nosso código é construido usando a implementação de OpenGL ES 1.0 para android.

Escolhemos trabalhar com o OpenGL ES 1.0 em vez do 2.0 por dois motivos, principalmente:

* simplicidade do pipeline: como dispúnhamos de tempo bastante limitado, principalmente para programar pareadamente, seria muito bom que mantivéssemos a complexidade a um mínimo. Isso se mostrou uma decisão acertada.
* suporte a API legada: nos dispositivos que testamos, um Jelly Bean (4.2, API 16) e um KitKat (4.4, API 19), não haveria diferença. Mas, dado que o código de exemplo da TFG, no qual nos baseamos, suportava até a API 8 sem maiores problemas, decidimos que seria interessante manter o suporte para APIs baixas. Isso se mostrou razoável ao rodar o projeto em um Gingerbread (2.3, API 8).

Texturas

Os arquivos de textura foram feitos no Inkscape e GIMP.

As texturas, como implementadas, permitem a mudança da cor dos objetos em código (em oposição a alteração na própria textura). Isso é interessante por permitir mais experimentação com as cores do jogo e mais flexibilidade em implementações futuras. Isso não tem grandes efeitos sobre o desempenho da aplicação: causa uma economia pequena de espaço, e um aumento também pequeno em processamento, mas nada relevante.


Som

Dois dos sons foram criados no BFXR, um aplicativo em Adobe AIR que permite sintetizar uma gama de sons "retrô".

Todos os sons foram obtidos com licenças CC-BY. Suas origens podem ser vistas na sessão "créditos" da propria aplicação.


A tela:

Dispositivos diferentes têm telas com proporções diferentes. Nosso jogo se adapta a essas proporções: O tamanho horizontal da tela é calculado na função OnSurfaceChanged, implementada no arquivo TouchSurfaceView. Essa informação é propagada por todo o código: World, Brick e Paddle precisam dela para se construir corretamente.

Fisica, gráficos e Game Loop:

O jogo é fortemente baseado no padrão GameLoop, como explicado em: http://gameprogrammingpatterns.com/game-loop.html

A cada renderização da tela de jogo, calculamos quanto tempo se passou (desde a última renderização) e fazemos a quantidade correspondente de passos da engine de física. Um passo do engine de fisica corresponde a uma quantidade fixa de tempo real (de alguns milissegundos). Isso permite que a execução da física seja consistente, mesmo quando temos devices com capacidades de processamento muito diferentes.

Infelizmente, a quantidade de tempo passado entre duas renderizações pode não ser multipla da quantidade de tempo em que ocorre um passo da física. Isso causa um descompasso entre a renderização e a física, que pode gerar artefatos visuais: a bolinha pode parecer se mover mais rapidamente numa mudança de frame, e mais lentamente na mudança de frame seguinte. Pudemos observar esse efeito quando testamos a aplicação em celulares mais antigos, mas ele não nos pareceu ser grande o bastante para comprometer a experiência do usuário. Se for necessário, há maneiras de mitigar esse problema. Poderíamos, como descrito no artigo sobre o GameLoop, implementar uma extrapolação do movimento dos objetos para suavizar o movimento.

Outro problema que teoricamente poderia surgir seria o tempo de execução de um passo da física demorar mais do que o tempo real a que ele corresponde. Nesse caso, o jogo ficaria completamente impossível de jogar. Felizmente, não observamos esse comportamento em nenhum dos celulares em que testamos o jogo.


Detecção de colisão e efeitos da colisão

A cada passo da engine de física, os objetos se movimentam de acordo com as suas velocidades atuais. Se dois deles ocuparem o mesmo espaço, o programa detecta uma colisão, e altera as velocidades apropriadamente. No caso do jogo de um jogador, a velocidade alterada é sempre a da bolinha. No caso de dois jogadores, os blocos móveis podem ter sua velocidade alterada também.

Uma preocupação importante é utilizar velocidades suficientemente pequenas na engine de física para garantir que todas as colisões sejam detectadas: velocidades muito grandes poderiam permitir, por exemplo, que a bolinha "ultrapassasse" um bloquinho em um unico passo, sem nunca compartilhar espaço com ele. As velocidades utilizadas na engine de física respeitam essa restrição e evitam essas "ultrapassagens". Note que isso não restringe as velocidades possíveis de gameplay: para tornar o jogo mais rápido, basta executar mais passos da física por segundo.

Após a colisão com um bloco, a bola sofre reflexão, em torno do eixo que, fisicamente, corresponderia à força normal. Essa colisão é especialmente interessante quando a bolinha colide com um vértice: nesse caso há muitos ângulos de saída possíveis, dependendo da forma exata da colisão.

Implementamos também uma maneira de realizar colisões entre uma bola e dois tijolos "ao mesmo tempo".  

Aplicar duas reflexões seguidas não geraria uma reflexão coerente com a física. Observamos esse comportamento em alguns brickbreakers comerciais, e o efeito parece bastante artificial.

Para evitar isso, implementamos na BrickList o seguinte comportamento: Ao detectar duas ou mais colisões, ao invés de realizar duas reflexões, somamos as direções das forças normais para obter uma nova força normal e realizar a reflexão

Raquete

O jogador controla um objeto que chamamos de raquete. Com essa raquete, ele impede que a bolinha caia e direciona a bolinha.

Experimentamos três versões da raquete, buscando melhorar a jogabilidade do jogo.

A primeira versão era simplesmente um Brick que se move. A reflexão na superficie superior era sempre a mesma, independente da posição relativa entre a raquete e a bola. A única maneira de o usuário direcionar a bola era com colisões nos vértices da raquete. Essa versão não oferecia ao usuário controle suficiente, e o jogo acabava ficando muito enfadonho.

A segunda versão implementava alterava o comportamento da reflexão na superfície superior. Ao invés da normal ser a normal usual (i.e., uma normal vertical) utilizávamos uma normal dependente do ponto de colisão. Quanto mais a direita do centro da raquete a bola batesse, mais inclinada a direita ficaria a normal.

Infelizmente, esse modelo ainda pareceu complicado demais para permitir uma boa jogabilidade: a posição ideal para o jogador colocar a raquete dependia de muitas variáveis: a posição da bolinha, a velocidade da bolinha e o alvo que ele pretendia acertar.

A ultima implementação da raquete ignora a física para melhorar a jogabilidade. Nessa implementação, a direção da bola após a colisão é determinada pelo ponto de contato entre a raquete e a bola. Quanto mais a direita do centro da raquete a bola bate, mais a direita ela sai.

Uma coisa interessante nas ultimas duas implementações é que elas são parametrizadas: podemos facilmente alterar o código para aumentar ou diminuir os desvios causados pela raquete. Assim, pudemos experimentar um pouco com diferentes desvios, para otimizar a jogabilidade. Seria interessante fazer um ajuste mais fino desses parâmetros. 
 
Bugs da raquete:
A raquete sai um pouco da tela. O toque do usuário determina o destino do centro da raquete, assim, um toque no canto da tela faz com que um pedaço da raquete deixe de estar visível. Isso seria trivial de corrigir, mas chegamos à conclusão de que ajuda um pouco na jogabilidade.

A raquete se move até o destino indicado pelo jogador. Nesse movimento, a velocidade dela é maior do que a velocidade da bola. Assim, algumas colisões entre a raquete em movimento e a bola podem gerar imagens em que a bolinha e a raquete se intersectam. Experimentamos algumas soluções para esse problema, mas não achamos nenhuma satisfatória.


Extrutura do código:

Nessa sessão, descrevemos as principais classes que compõe a aplicação.

World (WorldOfOne e WorldOfTwo): Implementam tipos de jogo. Há dois tipos de World. WorldOfOne implementa o jogo de um jogador, WorldOfTwo, o jogo de 2 jogadores.
Instanciam e coordenam os objetos presentes no jogo (Paddles, Balls e Bricks, esses ultimos através da BrickList)
São essas as classes que de fato interpretam o input do usuário (pois o input é interpretado diferentemente para o jogo de um jogador e o jogo de dois)


Engine: controla os passos da física, para manter a equivalencia entre eles e o tempo real

TouchSurfaceView: implementa as callbacks de OpenGl e as callbacks de input de usuário

BrickList: instancia os Bricks que compõe uma fase, e os administra (realiza movimentos se for o caso, administra colisões de Bricks com a bola, sinaliza quando não há mais Bricks a quebrar)

Brick: representa um tijolo de jogo. Implementa a lógica de detecção de colisão e de reflexão

TwoPlayerBrick: Um tipo especial de Brick que é móvel. É util para o jogo de dois jogadores.

Ball: implementa uma bolinha. Realiza os movimentos da bolinha.

Paddle: implementa a raquete, que é Um objeto que o jogador controla para influenciar o movimento da bolinha. Realiza seus movimentos e administra suas colisões com bolinhas.




Melhorias possíveis

Listamos aqui algumas melhorias que poderiam ser feitas no jogo (e qual consideramos serem suas relevâncias)

Há uma série de pequenos feedbacks visuais e auditivos que, cremos, aumentariam relevantemente a imersão do jogador:
* Seria interessante fazer com que a bola, ao destruir vários tijolos em um pequeno intervalo de tempo, emitisse  sons ligeiramente diferentes para cada bloquinho, gerando uma noção de "continuidade do movimento"
* Seria interessante criar uma animação para a destruição dos blocos
* Seria interessante um feedback visual na raquete para marcar o impacto. Ela poderia, por exemplo, oscilar brevemente

Em termos de jogabilidade, seria interessante implementar vidas no jogo de um jogador. Isso aumentaria um pouco a dificuldade. Da maneira atual, o jogador tem infinitas chances de vencer uma fase.

Melhorias de desempenho:
 Na classe Brick, seria interessante compartilhar o buffer para desenhar cada Brick entre todos os objetos (dado que o desenho pode ser feito com translações). Não sabemos qual seria a relevância dessa otimização
Seria possível otimizar os testes de colisão: se dividirmos o espaço disponível em setores, isso poderia reduzir drasticamente o número de colisões que são verificadas a cada passo do engine de física. Pelos nossos testes, porém, o teste de colisão, ingênuo como está, não consome uma quantidade relevante de tempo. Cremos que essa otimização, apesar de natural, não seria muito útil.

Bugs:
O aplicativo continua rodando quando a status bar é invocada e cobre a tela. Isso ocorre apesar de nós implementarmos corretamente o método onPause. Curiosamente, esse mesmo bug pode ser visto em jogos comerciais


Aprendizado e comentários pessoais:

O EP foi uma oportunidade de aprendizado interessante. Pudemos aprender sobre desenvolvimento de jogos (sobre o GameLoop, algoritmos de colisão, OpenGL) e sobre a interação com o dispostivo (lidar com a interação com a touchscreen foi surpreendentemente simples)

A interação com os colegas de sala foi muito rica. Ficamos com muita curiosidade a respeito de desenvolvimento de jogos e quais são as váriaveis relevantes.

A documentação oficial do OpenGL ES é meio esparsa. Isso causou algum desgaste e trabalho um pouco improdutivos, em alguns momentos. Infelizmente, a documentação oferecida no "android developers" também não era muito forte nessa área.

Referências

http://gameprogrammingpatterns.com/game-loop.html
http://insanitydesign.com/wp/projects/nehe-android-ports/
http://www.opengl.org/archives/resources/faq/technical/transparency.htm
http://developer.android.com/training/multiscreen/screendensities.html
http://developer.android.com/guide/topics/manifest/activity-element.html#config
https://www.khronos.org/opengles/sdk/1.1/docs/man/
http://www.pacdv.com/sounds/mechanical_sounds.html
http://www.freesound.org/people/Aiwha/sounds/189186/
http://www.bfxr.net
